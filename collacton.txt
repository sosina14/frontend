### **📌 Java Collections Framework (JCF) - Everything You Need to Know**  

The **Java Collections Framework (JCF)** provides **ready-to-use data structures** (like lists, sets, and maps) to efficiently store and manipulate data. It helps manage dynamic groups of objects, eliminating the need to manually implement data structures like arrays, linked lists, etc.

---

## **1️⃣ What is a Collection in Java?**  
A **collection** is a **group of objects** stored together as a single unit. Java provides an interface `Collection<E>` and various implementations like `ArrayList`, `HashSet`, `HashMap`, etc.

✅ **Collections make handling large amounts of data easier** by providing pre-built methods for insertion, deletion, sorting, and searching.

---

## **2️⃣ Java Collections Hierarchy**
Java's **Collection Framework** is divided into **three main interfaces**:

1. **List (Ordered, Allows Duplicates)**
   - Implementations: `ArrayList`, `LinkedList`, `Vector`, `Stack`
2. **Set (Unique Elements, No Duplicates)**
   - Implementations: `HashSet`, `LinkedHashSet`, `TreeSet`
3. **Map (Key-Value Pairs, Unique Keys)**
   - Implementations: `HashMap`, `LinkedHashMap`, `TreeMap`

📌 **Diagram Representation:**
```
                  Collection (Interface)
                        │
        ┌──────────────┴──────────────┐
        │                             │
       List                         Set
        │                             │
   ┌────┴───────┐          ┌──────────┴───────────┐
  ArrayList   LinkedList  HashSet  LinkedHashSet  TreeSet
```

---

## **3️⃣ List Interface (Ordered, Allows Duplicates)**  
- Maintains **insertion order**.
- Allows **duplicate values**.
- Provides **indexed access**.

#### **📝 Example: Using `ArrayList`**
```java
import java.util.ArrayList;

public class ListExample {
    public static void main(String[] args) {
        ArrayList<String> names = new ArrayList<>();
        
        // Adding elements
        names.add("Alice");
        names.add("Bob");
        names.add("Alice");  // Duplicates allowed

        // Printing List
        System.out.println("Names List: " + names);

        // Accessing elements by index
        System.out.println("First Element: " + names.get(0));

        // Iterating using for-each loop
        for (String name : names) {
            System.out.println(name);
        }
    }
}
```
✅ **Output:**
```
Names List: [Alice, Bob, Alice]
First Element: Alice
Alice
Bob
Alice
```

---

## **4️⃣ Set Interface (Unique Elements, No Duplicates)**
- Does **NOT** allow duplicate values.
- Does **NOT** maintain insertion order (`HashSet`).
- **Sorted order available** using `TreeSet`.

#### **📝 Example: Using `HashSet`**
```java
import java.util.HashSet;

public class SetExample {
    public static void main(String[] args) {
        HashSet<Integer> numbers = new HashSet<>();
        
        // Adding elements
        numbers.add(10);
        numbers.add(20);
        numbers.add(10);  // Duplicate (ignored)

        // Printing Set
        System.out.println("Numbers Set: " + numbers);
    }
}
```
✅ **Output (Order may vary due to hashing):**
```
Numbers Set: [10, 20]
```

---

## **5️⃣ Map Interface (Key-Value Pairs)**
- Stores **key-value pairs** (`HashMap`).
- Keys must be **unique**.
- Allows **efficient lookups**.

#### **📝 Example: Using `HashMap`**
```java
import java.util.HashMap;

public class MapExample {
    public static void main(String[] args) {
        HashMap<String, Integer> ages = new HashMap<>();

        // Adding key-value pairs
        ages.put("Alice", 25);
        ages.put("Bob", 30);
        ages.put("Alice", 28);  // Overwrites previous value

        // Printing Map
        System.out.println("Ages Map: " + ages);

        // Accessing value by key
        System.out.println("Alice's Age: " + ages.get("Alice"));
    }
}
```
✅ **Output:**
```
Ages Map: {Alice=28, Bob=30}
Alice's Age: 28
```

---

## **6️⃣ Iterating Through Collections**
### **🔹 Using `forEach` Loop**
```java
for (String name : names) {
    System.out.println(name);
}
```

### **🔹 Using `Iterator`**
```java
import java.util.Iterator;
ArrayList<String> list = new ArrayList<>();
list.add("One");
list.add("Two");

Iterator<String> it = list.iterator();
while (it.hasNext()) {
    System.out.println(it.next());
}
```

---

## **7️⃣ Choosing the Right Collection**
| Collection | Allows Duplicates? | Ordered? | Fast Lookup? |
|------------|----------------|---------|-------------|
| `ArrayList` | ✅ Yes | ✅ Yes | ❌ No |
| `LinkedList` | ✅ Yes | ✅ Yes | ❌ No |
| `HashSet` | ❌ No | ❌ No | ✅ Yes |
| `TreeSet` | ❌ No | ✅ Sorted | ❌ No |
| `HashMap` | ❌ No (Keys) | ❌ No | ✅ Yes |

---

## **📌 Summary**
✅ **`List`** – Ordered, allows duplicates (`ArrayList`, `LinkedList`).  
✅ **`Set`** – Unique elements, no duplicates (`HashSet`, `TreeSet`).  
✅ **`Map`** – Key-value pairs, fast lookups (`HashMap`, `TreeMap`).  

Do you want a **practice problem** to implement Collections? 🚀